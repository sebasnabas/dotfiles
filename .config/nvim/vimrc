""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" __   __   ___   __  __             ___     ___    _  _      ___    ___     ___  "
" \ \ / /  |_ _| |  \/  |    o O O  / __|   / _ \  | \| |    | __|  |_ _|   / __| "
"  \ V /    | |  | |\/| |   o      | (__   | (_) | | .` |    | _|    | |   | (_ | "
"  _\_/_   |___| |_|__|_|  TS__[O]  \___|   \___/  |_|\_|   _|_|_   |___|   \___| "
"_|""""|_|"""""|_|"""""| {======|_|"""""|_|"""""|_|"""""|_|""""|_|"""""|_|"""""|  "
"`-0-0-'"`-0-0-'"`-0-0-'./o--000'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-' "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader =","

"""""' Plugins '""""""""
call plug#begin('~/.local/share/nvim/plugged')

" Color scheme
Plug 'sonph/onehalf', {'rtp': 'vim/'}

" Utility
Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle'}
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'powerman/vim-plugin-AnsiEsc'

" Generic Programming Support
"" Comments
Plug 'tpope/vim-commentary'

"" Git Support
Plug 'tpope/vim-fugitive'

"" Interface
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"" Vim Wiki
Plug 'vimwiki/vimwiki'

""" Programming
Plug 'ycm-core/YouCompleteMe'

call plug#end()
""""""""""""""""""""""""

"""' NERDTree '"""
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | wincmd p
let NERDTreeStatusline="%{exists('b:NERDTree')?fnamemodify(b:NERDTree.root.path.str(), ':~'):''}"

" the ignore patterns are regular expression strings and seprated by comma
let NERDTreeIgnore = ['\.pyc$', '^__pycache__$']

map <C-n> :NERDTreeToggle <CR>

" Show Dotfiles
let NERDTreeShowHidden=1

"""' Goyo '"""
let g:goyo_linenr=1

"""' Syntastic '"""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

map <C-s> :SyntasticToggleMode <CR>

"""' Vim-Airline Configuration '"""
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='base16'

"""' devicons '"""
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
" adding the column to vimfiler
let g:webdevicons_enable_vimfiler = 1
" adding to vim-airline’s tabline
let g:webdevicons_enable_airline_tabline = 1
" adding to vim-airline’s statusline
let g:webdevicons_enable_airline_statusline = 1
" ctrlp glyphs
let g:webdevicons_enable_ctrlp = 1
" enable open and close folder/directory glyph flags (disabled by default with 0)
let g:DevIconsEnableFoldersOpenClose = 1
" enable folder/directory glyph flag (disabled by default with 0)
let g:WebDevIconsUnicodeDecorateFolderNodes = 1

""""" END Plug Configuration


""""""""""""""""""""""""""""""""""""""
"" Configuration Section
""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype plugin indent on
syntax on
set wrap
set encoding=utf8
set fileformat=unix

" Copy selected text to system clipboard (requires gvim/nvim/vim-x11 installed):
    vnoremap <C-c> "+y
    inoremap <C-v> <Esc>"+P

"" Show linenumbers
    set number
    set relativenumber
    set ruler

"" Set Proper Tabs
    set tabstop=4
    set shiftwidth=4
    set smarttab
    set expandtab
    set autoindent

"" Always display the status line
    set laststatus=2

"" Enable highlighting of the current line
    set cursorline

"" Enable autocompletion:
    set wildmode=longest,list,full

"" Search while typing
    set incsearch

"" Spell-check set to <leader>o,'o' for orthography
    map <leader>o :setlocal spell! spelllang=en_us<CR>

"" Grammar-check set to <leader>g, 'g' for grammar
    map <leader>g :LanguageToolCheck <CR>

"" 'z' for zen
    map <leader>z :Goyo <CR>

"" Splits open at the bottom and right
    set splitbelow splitright

"" Shortcutting split navigation
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l

"" Runs a script that cleans out tex build files whenever I close out of a tex file.
    autocmd VimLeave *.tex !texclear %

"" Compile document
    map <leader>c :w! \| !compiler <c-r>%<CR><CR>

"" Open corresponding pdf/.html or preview
    map <leader>v :!opout <c-r>%<CR><CR>

"" Automatically deletes all trailing whitespace
    autocmd BufWritePre * %s/\s\+$//e

"" Jump to <++>
    inoremap <Space><Space> <Esc>/<++><Enter>"_c4l

"" nohlsearch
    map <leader>s :nohlsearch <Enter>

" Exit modes
    map <Esc> <C-Space>

" Enable folding
    set foldmethod=indent
    set foldnestmax=10
    set nofoldenable
    set foldlevel=2

"" Theme and Styling
    colorscheme onehalfdark

    set bg=dark

    if exists('+termguicolors')

      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"

      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

      set termguicolors

    endif

"""' Python '"""
" highlighting
    let python_highlight_all=1

" debugging
    func! s:SetBreakpoint()
        cal append('.', repeat(' ', strlen(matchstr(getline('.'), '^\s*'))) . 'import ipdb; ipdb.set_trace()')
    endf

    func! s:RemoveBreakpoint()
        exe 'silent! g/^\s*import\sipdb\;\?\n*\s*ipdb.set_trace()/d'
    endf

    func! s:ToggleBreakpoint()
        if getline('.')=~#'^\s*import\sipdb' | cal s:RemoveBreakpoint() | el | cal s:SetBreakpoint() | en
    endf

" Toggle breakpoint
    nnoremap <F6> :call <SID>ToggleBreakpoint()<CR>

" Start debugging - Split window and call ipdb with current file
    nnoremap <F5> <C-w>s :term ipdb3 -c continue % <Enter> A

" Remove all breakppoints when saving
    autocmd QuitPre *.py autocmd BufWritePre * silent g/^\s*import\sipdb\;\?\n*\s*ipdb\.set_trace()/normal dd
