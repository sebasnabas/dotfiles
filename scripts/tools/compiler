#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md.
# Opens .sent files as sent presentations.
# Runs scripts based on extension or shebang

file=$(readlink -f "$1")
dir=$(dirname "$file")
base="${file%.*}"
ext="${file##*.}"

cd "$dir" || exit

mdtype() { \
    default_format=pdf && \
    format="$(sed 5q "$file" | grep -i output | cut -d ' ' -f 2)" && \
    pandoc -t "${format:-$default_format}" --highlight-style=kate -s -o "$base".pdf "$file"
}

textype() { \
    command="pdflatex"
    echo hi
    ( sed 5q "$file" | grep -i -q 'xelatex' ) && command="xelatex"
    ( sed 5q "$file" | grep -i -q 'luatex' ) && command="luatex"
    (cd "$dir" ; $command --interaction=nonstopmode -shell-escape "$base") && \
        echo  '#################################' && echo Looking for bib resource && \
        grep -qi addbibresource "$file" && \
        echo  '#################################' && echo Executing biber && \
        biber "$base" && \
        $command --interaction=nonstopmode -shell-escape "$base" && \
        $command --interaction=nonstopmode -shell-escape "$base"
}

if stat "${dir}/Makefile" > /dev/null 2>&1
then
    make
    exit
fi

case "$ext" in
    # Try to keep these cases in alphabetical order.
	[0-9]) preconv "$file" | refer -PS -e | groff -mandoc -T pdf > "$base".pdf ;;
	c) cc "$file" -o "$base" ;;
	cpp) g++ "$file" -o "$base" ;;
    cs) dotnet build "$file" ;;
	go) go run "$file" ;;
	h) make ;;
	java) javac -d classes "$file" && java -cp classes "${1%.*}" ;;
	m) octave "$file" ;;
    md) mdtype "$file" ;;
	mom) preconv "$file" | refer -PS -e | groff -mom -kept -T pdf > "$base".pdf ;;
	ms) preconv "$file" | refer -PS -e | groff -me -ms -kept -T pdf > "$base".pdf ;;
	org) emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
	py) python "$file" ;;
	[rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
	rs) cargo build ;;
	sass) sassc -a "$file" "$base.css" ;;
	scad) openscad -o "$base".stl "$file" ;;
	sent) setsid -f sent "$file" 2>/dev/null ;;
	tex) textype "$file" ;;
	*) sed -n '/^#!/s/^#!//p; q' "$file" | xargs -r -I % "$file" ;;
esac
